<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     May 24, 2013 10:20:41 AM                                                        

     xpdf-jni    
     JNI bindings for the Xpdf project                                
     ====================================================================== -->
<project name="xpdf-jni" default="all"
	xmlns:cpptasks="antlib:net.sf.antcontrib.cpptasks"
    xmlns:artifact="antlib:org.apache.maven.artifact.ant"
    xmlns:contrib="antlib:net.sf.antcontrib">

    <description>JNI bindings for the Xpdf project.</description>
	
	<property name="build.debug" value="true" />
	<property name="build.output.dir" location="target" />
	<property name="build.output.objs" location="${build.output.dir}/obj" />
	<property name="build.output.include" location="${build.output.dir}/include" />
	<property name="build.output.lib" location="${build.output.dir}/lib" />
	<property name="build.output.bin" location="${build.output.dir}/bin" />
	<property name="build.output.classes" location="${build.output.dir}/classes" />
	<property name="build.output.archive" location="${build.output.dir}/archive" />

	<property name="xpdf.groupId" value="com.foolabs.xpdf" />
	<property name="xpdf.version" value="3.0.2" />
	<property name="xpdf.vendor" value="Glyph &amp; Cog, LLC" />

	<property name="xpdf.jni.artifactId" value="javaxpdf" />
	<property name="xpdf.jni.version" value="0.1.0-SNAPSHOT" />


    <!-- ================================= 
          target: all              
         ================================= -->
    <target name="all" description="JNI bindings for the Xpdf project"
			depends="java,jni,jar,utils" />

	<!-- ================================= 
          target: utils              
         ================================= -->
    <target name="utils" description="Builds the executables."
			depends="pdftops,pdftotext,pdfinfo,pdffonts,pdfdetach,pdfimages,pdftoppm,xpdf" />
	
	
    <!-- - - - - - - - - - - - - - - - - - 
          target: init                      
         - - - - - - - - - - - - - - - - - -->
    <target name="init">
    	<mkdir dir="${build.output.lib}" />
        <mkdir dir="${build.output.bin}" />
    	<mkdir dir="${build.output.archive}" />

    	
    	<condition property="win32" value="true">
    		<os family="windows" />
    	</condition>
    	<condition property="macosx" value="true">
    		<os family="mac" name="Mac OS X" />
        </condition>
        <condition property="linux" value="true">
            <os name="Linux" />
        </condition>


        <condition property="os.arch.32bit" value="true">
            <or>
                <os arch="x86" />
                <os arch="i386" />
            </or>
        </condition>
        <condition property="os.arch.64bit" value="true">
            <or>
                <os arch="amd64" />
                <os arch="x86_64" />
            </or>
        </condition>
    	<condition property="os.name.simple" value="macosx">
    		<and>
    			<os family="mac" />
    			<os family="unix" />
    		</and>
    	</condition>
    	<property name="os.name.simple" value="${os.name}" />


    	<available property="java.include" file="${java.home}/include" type="dir" value="${java.home}/include" />
    	<available property="java.include" file="${java.home}/../include" type="dir" value="${java.home}/../include" />

        <cpptasks:compiler id="gcc-windows" name="gcc">
            <cpptasks:sysincludepath path="${java.include}" />
            <cpptasks:sysincludepath path="${java.include}/win32" />
            <cpptasks:compilerarg value="-m32" if="os.arch.32bit" />
            <cpptasks:compilerarg value="-m64" if="os.arch.64bit" />
            <cpptasks:compilerarg value="-mwindows" />
        </cpptasks:compiler>

        <cpptasks:compiler id="gcc-macosx" name="gcc">
            <cpptasks:sysincludepath path="${java.include}" />
            <cpptasks:compilerarg value="-mmacosx-version-min=10.3" if="os.arch.32bit" />
            <cpptasks:compilerarg value="-mmacosx-version-min=10.4" if="os.arch.64bit" />
            <cpptasks:compilerarg value="-arch" />
            <cpptasks:compilerarg value="i386" />
            <cpptasks:compilerarg value="-arch" />
            <cpptasks:compilerarg value="ppc" if="os.arch.32bit" />
            <cpptasks:compilerarg value="x86_64" if="os.arch.64bit" />
        </cpptasks:compiler>

        <cpptasks:compiler id="gcc-linux" name="gcc">
            <cpptasks:sysincludepath path="${java.include}" />
            <cpptasks:sysincludepath path="${java.include}/linux" />
            <cpptasks:compilerarg value="-m32" if="os.arch.32bit" />
            <cpptasks:compilerarg value="-m64" if="os.arch.64bit" />
        </cpptasks:compiler>
    </target>
	
	
	<!-- ================================= 
          target: java              
         ================================= -->
    <target name="java" depends="init" description="Java Classes">
    	<mkdir dir="${build.output.classes}" />
        <javac srcdir="src/main/java" destdir="${build.output.classes}" includeAntRuntime="false" debug="on" />
    </target>
	

	<!-- ================================= 
          target: goo              
         ================================= -->
    <target name="goo" depends="init" description="Builds the Goo static library.">
    	<mkdir dir="${build.output.objs}/goo" />
    	
    	<cpptasks:cc outfile="${build.output.lib}/Goo" outtype="static"
    			objdir="${build.output.objs}/goo" debug="${build.debug}" warnings="none">
    		<cpptasks:compiler refid="gcc-windows" if="win32" />
            <cpptasks:compiler refid="gcc-macosx" if="macosx" />
            <cpptasks:compiler refid="gcc-linux" if="linux" />
        	<compilerarg value="-fPIC" />
    		
    		<cpptasks:includepath path="src/main/include/autoconf" />
            <cpptasks:includepath path="src/main/include/goo" />
    		
    		<fileset dir="src/main/c++/goo">
    			<include name="GHash.cc" />
    			<include name="GList.cc" />
    			<include name="GString.cc" />
    			<include name="gmem.cc" />
    			<include name="gmempp.cc" />
    			<include name="gfile.cc" />
    			<include name="FixedPoint.cc" />
    			<include name="parseargs.c" />
			</fileset>
    	</cpptasks:cc>
    </target>
	
	<!-- ================================= 
          target: fofi              
         ================================= -->
    <target name="fofi" depends="init,goo" description="Builds the fofi static library.">
        <mkdir dir="${build.output.objs}/fofi" />
    	
    	<cpptasks:cc outfile="${build.output.lib}/fofi" outtype="static" objdir="${build.output.objs}/fofi" debug="${build.debug}" warnings="none">
            <cpptasks:compiler refid="gcc-windows" if="win32" />
            <cpptasks:compiler refid="gcc-macosx" if="macosx" />
            <cpptasks:compiler refid="gcc-linux" if="linux" />
        	<compilerarg value="-fPIC" />
    		
    		<cpptasks:includepath path="src/main/include/autoconf" />
    		<cpptasks:includepath path="src/main/include/goo" />
    		<cpptasks:includepath path="src/main/include/fofi" />
    		
    		<fileset dir="src/main/c++/fofi">
    			<include name="FoFiBase.cc" />
    			<include name="FoFiEncodings.cc" />
    			<include name="FoFiIdentifier.cc" />
    			<include name="FoFiTrueType.cc" />
    			<include name="FoFiType1.cc" />
    			<include name="FoFiType1C.cc" />
    		</fileset>
    	</cpptasks:cc>
    </target>
	
	<!-- ================================= 
          target: splash              
         ================================= -->
    <target name="splash" depends="init,goo,fofi" description="Builds the splash static library.">
        <mkdir dir="${build.output.objs}/splash" />
    	
    	<cpptasks:cc outfile="${build.output.lib}/splash" outtype="static" objdir="${build.output.objs}/splash" debug="${build.debug}" warnings="none">
            <cpptasks:compiler refid="gcc-windows" if="win32" />
            <cpptasks:compiler refid="gcc-macosx" if="macosx" />
            <cpptasks:compiler refid="gcc-linux" if="linux" />
        	<compilerarg value="-fPIC" />
    		
    		<cpptasks:includepath path="src/main/include/autoconf" />
    		<cpptasks:includepath path="src/main/include/goo" />
    		<cpptasks:includepath path="src/main/include/fofi" />
    		<cpptasks:includepath path="src/main/include/splash" />
    		
    		<fileset dir="src/main/c++/splash">
				<include name="Splash.cc" />
				<include name="SplashBitmap.cc" />
				<include name="SplashClip.cc" />
				<include name="SplashFTFont.cc" />
				<include name="SplashFTFontEngine.cc" />
				<include name="SplashFTFontFile.cc" />
				<include name="SplashFont.cc" />
				<include name="SplashFontEngine.cc" />
				<include name="SplashFontFile.cc" />
				<include name="SplashFontFileID.cc" />
				<include name="SplashPath.cc" />
				<include name="SplashPattern.cc" />
				<include name="SplashScreen.cc" />
				<include name="SplashState.cc" />
				<include name="SplashT1Font.cc" />
				<include name="SplashT1FontEngine.cc" />
				<include name="SplashT1FontFile.cc" />
				<include name="SplashXPath.cc" />
				<include name="SplashXPathScanner.cc" />
    		</fileset>
    	</cpptasks:cc>
    </target>
	
	<!-- ================================= 
          target: libxpdf              
         ================================= -->
    <target name="libxpdf" depends="goo,fofi,splash" description="Builds the xpdf static library.">
        <mkdir dir="${build.output.objs}/xpdf" />
    	
    	<cpptasks:cc outfile="${build.output.lib}/xpdf" outtype="static" objdir="${build.output.objs}/xpdf" debug="${build.debug}" warnings="none">
            <cpptasks:compiler refid="gcc-windows" if="win32" />
            <cpptasks:compiler refid="gcc-macosx" if="macosx" />
            <cpptasks:compiler refid="gcc-linux" if="linux" />
        	<compilerarg value="-fPIC" />
			
    		<cpptasks:includepath path="src/main/include/autoconf" />
    		<cpptasks:includepath path="src/main/include/goo" />
    		<cpptasks:includepath path="src/main/include/fofi" />
    		<cpptasks:includepath path="src/main/include/splash" />
    		<cpptasks:includepath path="src/main/include/xpdf" />
    		
    		<fileset dir="src/main/c++/xpdf">
				<include name="Annot.cc" />
				<include name="Array.cc" />
				<include name="BuiltinFont.cc" />
				<include name="BuiltinFontTables.cc" />
				<include name="CMap.cc" />
				<include name="Catalog.cc" />
				<include name="CharCodeToUnicode.cc" />
				<include name="CoreOutputDev.cc" />
				<include name="Decrypt.cc" />
				<include name="Dict.cc" />
				<include name="Error.cc" />
				<include name="FontEncodingTables.cc" />
				<include name="Function.cc" />
				<include name="Gfx.cc" />
				<include name="GfxFont.cc" />
				<include name="GfxState.cc" />
				<include name="GlobalParams.cc" />
				<include name="ImageOutputDev.cc" />
				<include name="JArithmeticDecoder.cc" />
				<include name="JBIG2Stream.cc" />
				<include name="JPXStream.cc" />
				<include name="Lexer.cc" />
				<include name="Link.cc" />
				<include name="NameToCharCode.cc" />
				<include name="Object.cc" />
				<include name="OptionalContent.cc" />
				<include name="Outline.cc" />
				<include name="OutputDev.cc" />
				<include name="PDFCore.cc" />
				<include name="PDFDoc.cc" />
				<include name="PDFDocEncoding.cc" />
				<include name="PSOutputDev.cc" />
				<include name="PSTokenizer.cc" />
				<include name="Page.cc" />
				<include name="Parser.cc" />
				<include name="PreScanOutputDev.cc" />
				<include name="SecurityHandler.cc" />
				<include name="SplashOutputDev.cc" />
				<include name="Stream.cc" />
				<include name="TextOutputDev.cc" />
				<include name="UnicodeMap.cc" />
				<include name="UnicodeTypeTable.cc" />
				<include name="XPDFApp.cc" if="x11" />
				<include name="XPDFCore.cc" if="x11" />
				<include name="XPDFTree.cc" if="x11" />
				<include name="XPDFViewer.cc" if="x11" />
				<include name="XpdfPluginAPI.cc" if="x11" />
				<include name="XRef.cc" />
    		</fileset>
    	</cpptasks:cc>
    </target>


	<!-- ================================= 
          target: jni-headers              
         ================================= -->
	<target name="jni-headers" depends="java" description="Builds the JNI headers.">
		<mkdir dir="${build.output.include}" />
		<mkdir dir="${build.output.include}/jni" />

        <javah classpath="${build.output.classes}"
            class="com.foolabs.xpdf.GlobalParameters" outputFile="${build.output.include}/jni/GlobalParameters.h" />
        <javah classpath="${build.output.classes}"
            class="com.foolabs.xpdf.PDFDocument" outputFile="${build.output.include}/jni/PDFDocument.h" />
        <javah classpath="${build.output.classes}"
            class="com.foolabs.xpdf.PDFPage" outputFile="${build.output.include}/jni/PDFPage.h" />
	</target>


	<!-- ================================= 
          target: jni              
         ================================= -->
    <target name="jni" depends="init,goo,fofi,splash,libxpdf,jni-headers" description="Builds the JNI library.">
        <mkdir dir="${build.output.objs}/jni" />
    	
    	<echo level="debug">java.home=${java.home}</echo>
    	<echo level="debug">-I${java.home}/include -I${java.home}/include/${java.platform}</echo>
    	
        <cpptasks:cc outfile="${build.output.lib}/xpdf-jni" outtype="shared"
            outputfileproperty="build.output.lib.xpdf-jni"
            objdir="${build.output.objs}/jni"
            debug="${build.debug}">
            <cpptasks:compiler refid="gcc-windows" if="win32" />
            <cpptasks:compiler refid="gcc-macosx" if="macosx" />
            <cpptasks:compiler refid="gcc-linux" if="linux" />
    		<compilerarg value="-fPIC" />
        	
    		<cpptasks:includepath path="src/main/include/autoconf" />
    		<cpptasks:includepath path="src/main/include/goo" />
    		<cpptasks:includepath path="src/main/include/fofi" />
    		<cpptasks:includepath path="src/main/include/splash" />
    		<cpptasks:includepath path="src/main/include/xpdf" />
    		<cpptasks:includepath path="src/main/include/jni" />
			<cpptasks:includepath path="${build.output.include}/jni" />
    		
        	<cpptasks:libset dir="${build.output.lib}" libs="xpdf,splash,fofi,Goo" />
        	<cpptasks:syslibset libs="m,stdc++" />
    		
    		
        	<fileset dir="src/main/c++/jni">
    			<include name="Handle.cpp" />
    			<include name="JavaObjectWrapper.cpp" />
    			<include name="GlobalParameters.cpp" />
    			<include name="PDFDocument.cpp" />
    			<include name="PDFPage.cpp" />
    			<include name="TextCollector.cpp" />
    		</fileset>
        </cpptasks:cc>
    	
    	<mkdir dir="${build.output.archive}/META-INF/lib/${os.name}" />
    	<copy	file="${build.output.lib.xpdf-jni}"
    			tofile="${build.output.archive}/META-INF/lib/${os.name}/Xpdf-${os.arch}.bin" />
    </target>
	
	
	<!-- ================================= 
          target: jar
         ================================= -->
    <target name="jar" depends="java" description="Construct Java Archive">
		<jar destfile="${build.output.dir}/javaxpdf.jar">
			<fileset dir="${build.output.archive}">
				<exclude name="META-INF/lib" /> <!-- Only used for native-jar. -->
			</fileset>
			<fileset dir="${build.output.classes}" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<section name="xpdf">
					<attribute name="Implementation-Title" value="xpdf" />
					<attribute name="Implementation-Version" value="${xpdf.version}" />
					<attribute name="Implementation-Vendor" value="${xpdf.vendor}" />
				</section>
			</manifest>
		</jar>
	</target>


	<!-- ================================= 
          target: native-jar
         ================================= -->
    <target name="native-jar" depends="java,jni" description="Construct Java Archive (with native library)">
		<jar destfile="${build.output.dir}/javaxpdf-${os.name.simple}-${os.arch}.jar">
			<fileset dir="${build.output.archive}" />
			<fileset dir="${build.output.classes}" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<section name="xpdf">
					<attribute name="Implementation-Title" value="xpdf" />
					<attribute name="Implementation-Version" value="${xpdf.version}" />
					<attribute name="Implementation-Vendor" value="${xpdf.vendor}" />
				</section>
			</manifest>
		</jar>
	</target>


	<!-- =================================
		 target: install
		 ================================= -->
	<target name="install" depends="jar,native-jar" description="Install JAR to local repository.">
        <!--<contrib:propertyregex property="build.output.lib.xpdf-jni.ext" override="true"
            input="${build.output.lib.xpdf-jni}" regexp="\.([^\.]+)$" select="\1" />-->
		
		<artifact:install file="${build.output.dir}/javaxpdf.jar">
			<artifact:pom file="pom.xml" />
			<artifact:attach file="${build.output.dir}/javaxpdf-${os.name.simple}-${os.arch}.jar" classifier="${os.name.simple}-${os.arch}" />
		</artifact:install>
	</target>

	<!-- =================================
		 target: install-utils
		 ================================= -->
	<target name="install-utils" depends="utils" description="Install binaries.">
		<fail message="Not yet implemented." />
    </target>

	<!-- =================================
		 target: deploy
		 ================================= -->
    <target name="deploy" depends="jni,jar" description="Deploy to Maven Repository">
        <artifact:deploy>
            <artifact:pom file="pom.xml" />
            <artifact:attach file="${build.output.dir}/javaxpdf.jar" type="jar" />
            <artifact:attach file="${build.output.lib.xpdf-jni}" type="lib" classifier="${os.name}-${os.arch}" />
            <artifact:remoteRepository id="snapshots" url="${snapshotsRepoUrl}" />
        </artifact:deploy>
		<fail message="Not yet implemented." />
    </target>

	
	<!-- ================================= 
          target: pdftops              
         ================================= -->
    <target name="pdftops" depends="goo,fofi,splash,libxpdf" description="Builds the pdftops executable.">
    	<cpptasks:cc outfile="${build.output.bin}/pdftops" outtype="executable" debug="${build.debug}" objdir="${build.output.objs}/xpdf">
    		<cpptasks:includepath path="src/main/include/autoconf" />
    		<cpptasks:includepath path="src/main/include/goo" />
    		<cpptasks:includepath path="src/main/include/fofi" />
    		<cpptasks:includepath path="src/main/include/splash" />
    		<cpptasks:includepath path="src/main/include/xpdf" />
    		<cpptasks:libset dir="${build.output.lib}" libs="xpdf,splash,fofi,Goo" />
    		<cpptasks:syslibset libs="m,stdc++" />
    		<fileset dir="src/main/c++/xpdf">
				<include name="pdftops.cc" />
    		</fileset>
    	</cpptasks:cc>
    </target>
	
	<!-- ================================= 
          target: pdftotext              
         ================================= -->
    <target name="pdftotext" depends="goo,fofi,splash,libxpdf" description="Builds the pdftotext executable.">
    	<cpptasks:cc outfile="${build.output.bin}/pdftotext" outtype="executable" debug="${build.debug}" objdir="${build.output.objs}/xpdf">
    		<cpptasks:includepath path="src/main/include/autoconf" />
    		<cpptasks:includepath path="src/main/include/goo" />
    		<cpptasks:includepath path="src/main/include/fofi" />
    		<cpptasks:includepath path="src/main/include/splash" />
    		<cpptasks:includepath path="src/main/include/xpdf" />
    		<cpptasks:libset dir="${build.output.lib}" libs="xpdf,splash,fofi,Goo" />
    		<cpptasks:syslibset libs="m,stdc++" />
    		<fileset dir="src/main/c++/xpdf">
				<include name="pdftotext.cc" />
    		</fileset>
    	</cpptasks:cc>
    </target>
	
	<!-- ================================= 
          target: pdfinfo              
         ================================= -->
    <target name="pdfinfo" depends="goo,fofi,splash,libxpdf" description="Builds the pdfinfo executable.">
    	<cpptasks:cc outfile="${build.output.bin}/pdfinfo" outtype="executable" debug="${build.debug}" objdir="${build.output.objs}/xpdf">
    		<cpptasks:includepath path="src/main/include/autoconf" />
    		<cpptasks:includepath path="src/main/include/goo" />
    		<cpptasks:includepath path="src/main/include/fofi" />
    		<cpptasks:includepath path="src/main/include/splash" />
    		<cpptasks:includepath path="src/main/include/xpdf" />
    		<cpptasks:libset dir="${build.output.lib}" libs="xpdf,splash,fofi,Goo" />
    		<cpptasks:syslibset libs="m,stdc++" />
    		<fileset dir="src/main/c++/xpdf">
				<include name="pdfinfo.cc" />
    		</fileset>
    	</cpptasks:cc>
    </target>
	
	<!-- ================================= 
          target: pdffonts              
         ================================= -->
    <target name="pdffonts" depends="goo,fofi,splash,libxpdf" description="Builds the pdffonts executable.">
    	<cpptasks:cc outfile="${build.output.bin}/pdffonts" outtype="executable" debug="${build.debug}" objdir="${build.output.objs}/xpdf">
    		<cpptasks:includepath path="src/main/include/autoconf" />
    		<cpptasks:includepath path="src/main/include/goo" />
    		<cpptasks:includepath path="src/main/include/fofi" />
    		<cpptasks:includepath path="src/main/include/splash" />
    		<cpptasks:includepath path="src/main/include/xpdf" />
    		<cpptasks:libset dir="${build.output.lib}" libs="xpdf,splash,fofi,Goo" />
    		<cpptasks:syslibset libs="m,stdc++" />
    		<fileset dir="src/main/c++/xpdf">
				<include name="pdffonts.cc" />
    		</fileset>
    	</cpptasks:cc>
    </target>
	
	<!-- ================================= 
          target: pdfdetach              
         ================================= -->
    <target name="pdfdetach" depends="goo,fofi,splash,libxpdf" description="Builds the pdfdetach executable.">
    	<cpptasks:cc outfile="${build.output.bin}/pdfdetach" outtype="executable" debug="${build.debug}" objdir="${build.output.objs}/xpdf">
    		<cpptasks:includepath path="src/main/include/autoconf" />
    		<cpptasks:includepath path="src/main/include/goo" />
    		<cpptasks:includepath path="src/main/include/fofi" />
    		<cpptasks:includepath path="src/main/include/splash" />
    		<cpptasks:includepath path="src/main/include/xpdf" />
    		<cpptasks:libset dir="${build.output.lib}" libs="xpdf,splash,fofi,Goo" />
    		<cpptasks:syslibset libs="m,stdc++" />
    		<fileset dir="src/main/c++/xpdf">
				<include name="pdfdetach.cc" />
    		</fileset>
    	</cpptasks:cc>
    </target>
	
	<!-- ================================= 
          target: pdfimages              
         ================================= -->
    <target name="pdfimages" depends="goo,fofi,splash,libxpdf" description="Builds the pdfimages executable.">
    	<cpptasks:cc outfile="${build.output.bin}/pdfimages" outtype="executable" debug="${build.debug}" objdir="${build.output.objs}/xpdf">
    		<cpptasks:includepath path="src/main/include/autoconf" />
    		<cpptasks:includepath path="src/main/include/goo" />
    		<cpptasks:includepath path="src/main/include/fofi" />
    		<cpptasks:includepath path="src/main/include/splash" />
    		<cpptasks:includepath path="src/main/include/xpdf" />
    		<cpptasks:libset dir="${build.output.lib}" libs="xpdf,splash,fofi,Goo" />
    		<cpptasks:syslibset libs="m,stdc++" />
    		<fileset dir="src/main/c++/xpdf">
				<include name="pdfimages.cc" />
    		</fileset>
    	</cpptasks:cc>
    </target>
	
	<!-- ================================= 
          target: pdftoppm              
         ================================= -->
    <target name="pdftoppm" depends="goo,fofi,splash,libxpdf" if="x11" description="Builds the pdftoppm executable.">
    	<cpptasks:cc outfile="${build.output.bin}/pdftoppm" outtype="executable" debug="${build.debug}" objdir="${build.output.objs}/xpdf">
    		<cpptasks:includepath path="src/main/include/autoconf" />
    		<cpptasks:includepath path="src/main/include/goo" />
    		<cpptasks:includepath path="src/main/include/fofi" />
    		<cpptasks:includepath path="src/main/include/splash" />
    		<cpptasks:includepath path="src/main/include/xpdf" />
    		<cpptasks:libset dir="${build.output.lib}" libs="xpdf,splash,fofi,Goo" />
    		<cpptasks:syslibset libs="m,stdc++" />
    		<fileset dir="src/main/c++/xpdf">
				<include name="pdftoppm.cc" />
    		</fileset>
    	</cpptasks:cc>
    </target>
	
	<!-- ================================= 
          target: xpdf              
         ================================= -->
    <target name="xpdf" depends="goo,fofi,splash,libxpdf" if="x11" description="Builds the xpdf executable.">
    	<cpptasks:cc outfile="${build.output.bin}/xpdf" outtype="executable" debug="${build.debug}" objdir="${build.output.objs}/xpdf">
    		<cpptasks:includepath path="src/main/include/autoconf" />
    		<cpptasks:includepath path="src/main/include/goo" />
    		<cpptasks:includepath path="src/main/include/fofi" />
    		<cpptasks:includepath path="src/main/include/splash" />
    		<cpptasks:includepath path="src/main/include/xpdf" />
    		<cpptasks:libset dir="${build.output.lib}" libs="xpdf,splash,fofi,Goo" />
    		<cpptasks:syslibset libs="m,stdc++" />
    		<fileset dir="src/main/c++/xpdf">
				<include name="xpdf.cc" />
    		</fileset>
    	</cpptasks:cc>
    </target>

	
	<!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean" description="Removes build output.">
        <delete dir="${build.output.dir}" />
    </target>


</project>
